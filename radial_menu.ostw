import "math.ostw";

playervar define menuItems;
playervar define menuCenter; // The center of the menu relative to the player
playervar define menuItemPositions; // The positions of the menu items relative to the menu center
playervar define menuItemIDs; // The InWorldText IDs of the menu items
playervar define menuScale;
playervar define menuVisibleTo; // Helper variable to make menu invisible
playervar define angleFromMenuCenter; // Angle between reticle and menuCenter
playervar define tmp; // Temporary variable. Don't rely on its content!!!

define menuDistanceFromPlayer: 2; // z-distance of the menu to the players eyes
define menuItemIconScale: 2.5; // Scale of the menu items
define menuCenterOffset: Vector(0,-0.150,0);
define menuAnimationTime: 0.2; // The time in which the menu is animated open/closed
define selectionRadius: 0.5; // Radius around menu items where they can be selected
define maxMenuScale: 0.2 + CountOf(menuItems) * 0.03;

// Menu State
define menuIsClosed: menuScale == 0; 
define menuIsOpening: menuScale > 0;
define menuIsOpen: menuScale == maxMenuScale;

rule: "Init Player"
Event.OngoingPlayer
{
    ChaseVariableAtRate(
        angleFromMenuCenter, 
        HorizontalAngleTowards(
            EventPlayer(),
            WorldVectorOf(
                LocalVectorOf(EyePosition() + menuCenter - menuCenterOffset),
                EventPlayer()
            ),
        ),
        360,
        RateChaseReevaluation.DestinationAndRate
    )
    updateMenu()
}

rule: "Open Menu"
Event.OngoingPlayer
if(IsButtonHeld(EventPlayer(), Button.Interact))
if(menuIsClosed)
{
    menuVisibleTo = EventPlayer()
    menuCenter = menuCenterOffset + menuDistanceFromPlayer * DirectionFromAngles(HorizontalFacingAngleOf(EventPlayer()), clamp(VerticalFacingAngleOf(EventPlayer()), -40, 40))
    ChaseVariableOverTime(menuScale, maxMenuScale, menuAnimationTime, TimeChaseReevaluation.None)
}

rule: "Close Menu"
Event.OngoingPlayer
if(!IsButtonHeld(EventPlayer(), Button.Interact))
if(menuIsOpening)
{
    ChaseVariableOverTime(menuScale, 0, menuAnimationTime, TimeChaseReevaluation.None)
    Wait(menuAnimationTime * 0.8)
    menuVisibleTo = []
}

rule: "Let menu follow reticle"
Event.OngoingPlayer
if(menuIsOpen)
if(AbsoluteValue(angleFromMenuCenter) > (30 * (menuScale + 0.5)))
{
    ChaseVariableOverTime(
        menuCenter,
        menuCenterOffset + menuDistanceFromPlayer * DirectionFromAngles(
            HorizontalFacingAngleOf(EventPlayer()) + sign(angleFromMenuCenter)*28,
            clamp(VerticalFacingAngleOf(EventPlayer()), -40, 40)
        ),
        0.1,
        TimeChaseReevaluation.DestinationAndDuration
    )
}

rule: "Stop menu following reticle"
Event.OngoingPlayer
if(AbsoluteValue(angleFromMenuCenter) < (30 * (menuScale + 0.5)))
{
    StopChasingVariable(menuCenter)
}

rule: "Select Menu Item"
Event.OngoingPlayer
if(!IsButtonHeld(EventPlayer(), Button.Interact))
if(menuIsOpen)
{
    
    if(HeroOf() == Hero.Winston) tmp = -2*menuCenterOffset
    else tmp = -menuCenterOffset
    
    tmp = getIndexOfSelectedMenuItem(tmp)
    
    if(tmp >= 0) {
        ForcePlayerHero(EventPlayer(), ValueInArray(menuItems, tmp))
        StopForcingHero()
    }
}

rule: "Player leaves"
Event.OnPlayerLeave
{
    clearMenuGUI()
}

rule: "Update menu if number of allowed heroes change"
Event.OngoingPlayer
if(CountOf(menuItems) != CountOf(AllowedHeroes()))
{
    updateMenu()
}

void updateMenu() "Update Menu" {
    updateMenuItems()
    updateMenuGUI()
}

void updateMenuItems() {
    menuItems = FilteredArray([AllSupportHeroes(), AllTankHeroes(), AllDamageHeroes()], ArrayContains(AllowedHeroes(), ArrayElement()))
    menuItemPositions = []
    if(CountOf(menuItems) <= 2) {
        menuItemPositions = [Left(), Right()]
    } else {
        for(tmp=0; CountOf(menuItems); 1) {
            menuItemPositions[tmp] = Vector(
                SineFromDegrees((360/CountOf(menuItems)) * tmp),
                CosineFromDegrees((360/CountOf(menuItems)) * tmp),
                0
            )
        }
    }
}

void updateMenuGUI() {
    clearMenuGUI()

    tmp = LastTextID() + 1

    // Create InWorldText
    Skip(30 - CountOf(menuItems))
    createMenuItem(30)
    createMenuItem(29)
    createMenuItem(28)
    createMenuItem(27)
    createMenuItem(26)
    createMenuItem(25)
    createMenuItem(24)
    createMenuItem(23)
    createMenuItem(22)
    createMenuItem(21)
    createMenuItem(20)
    createMenuItem(19)
    createMenuItem(18)
    createMenuItem(17)
    createMenuItem(16)
    createMenuItem(15)
    createMenuItem(14)
    createMenuItem(13)
    createMenuItem(12)
    createMenuItem(11)
    createMenuItem(10)
    createMenuItem(9)
    createMenuItem(8)
    createMenuItem(7)
    createMenuItem(6)
    createMenuItem(5)
    createMenuItem(4)
    createMenuItem(3)
    createMenuItem(2)
    createMenuItem(1)
    createMenuItem(0)

    // Save IDs of successfully created InWorldTexts (no ID is created by OW if creation fails)
    for(tmp=tmp; LastTextID(); 1) {
         menuItemIDs = Append(menuItemIDs, tmp)
    }
}

void clearMenuGUI() {
    for(tmp=0; CountOf(menuItemIDs); 1) {
        DestroyInWorldText(menuItemIDs[tmp])
    }
    menuItemIDs = []
}

void createMenuItem(ref define idx) {
    CreateInWorldText(
        menuVisibleTo,
        HeroIconString(menuItems[idx]),
        WorldVectorOf(
            LocalVectorOf(EyePosition() + menuCenter) + menuItemPositions[idx] * menuScale,
            EventPlayer()
        ),
        menuItemIconScale,
        Clipping.DoNotClip
    )
}

define getIndexOfSelectedMenuItem(ref define reticleOffset) {
    return IndexOfArrayValue(
        menuItemPositions,
        FirstOf(
            getMenuItemPositionsNearMouse(selectionRadius, reticleOffset)
        )
    );
}

define getMenuItemPositionsNearMouse(ref define radius, ref define reticleOffset) {
    return FilteredArray(
        menuItemPositions,
        AngleBetweenVectors(
            FacingDirectionOf(), 
            DirectionTowards(
                EyePosition(),
                WorldVectorOf(
                    LocalVectorOf(EyePosition() + menuCenter + reticleOffset) + ArrayElement() * menuScale,
                    EventPlayer()
                ),
            )
        ) < radius
    );
}